var _jfmengels$elm_lint$Lint_Rules_NoUselessIf$error = A2(_jfmengels$elm_lint$Lint_Types$LintError, 'NoUselessIf', 'Useless if expression: It will always evaluate to the same value');
var _jfmengels$elm_lint$Lint_Rules_NoUselessIf$expressionFn = F2(
	function (ctx, node) {
		var _p0 = node;
		if ((_p0.ctor === 'Enter') && (_p0._0.ctor === 'If')) {
			return _elm_lang$core$Native_Utils.eq(_p0._0._1, _p0._0._2) ? {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: _jfmengels$elm_lint$Lint_Rules_NoUselessIf$error,
					_1: {ctor: '[]'}
				},
				_1: ctx
			} : {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: ctx
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: ctx
			};
		}
	});
var _jfmengels$elm_lint$Lint_Rules_NoUselessIf$Context = {};
var _jfmengels$elm_lint$Lint_Rules_NoUselessIf$implementation = {
	statementFn: _jfmengels$elm_lint$Lint$doNothing,
	typeFn: _jfmengels$elm_lint$Lint$doNothing,
	expressionFn: _jfmengels$elm_lint$Lint_Rules_NoUselessIf$expressionFn,
	moduleEndFn: function (ctx) {
		return {
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: ctx
		};
	},
	initialContext: _jfmengels$elm_lint$Lint_Rules_NoUselessIf$Context
};
var _jfmengels$elm_lint$Lint_Rules_NoUselessIf$rule = function (input) {
	return A2(_jfmengels$elm_lint$Lint$lint, input, _jfmengels$elm_lint$Lint_Rules_NoUselessIf$implementation);
};
