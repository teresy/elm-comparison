var _jfmengels$elm_lint$Lint_Rules_NoNestedLet$error = A2(_jfmengels$elm_lint$Lint_Types$LintError, 'NoNestedLet', 'Do not nest Let expressions directly');
var _jfmengels$elm_lint$Lint_Rules_NoNestedLet$expressionFn = F2(
	function (ctx, node) {
		var _p0 = node;
		if (((_p0.ctor === 'Enter') && (_p0._0.ctor === 'Let')) && (_p0._0._1.ctor === 'Let')) {
			return {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: _jfmengels$elm_lint$Lint_Rules_NoNestedLet$error,
					_1: {ctor: '[]'}
				},
				_1: ctx
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: ctx
			};
		}
	});
var _jfmengels$elm_lint$Lint_Rules_NoNestedLet$Context = {};
var _jfmengels$elm_lint$Lint_Rules_NoNestedLet$implementation = {
	statementFn: _jfmengels$elm_lint$Lint$doNothing,
	typeFn: _jfmengels$elm_lint$Lint$doNothing,
	expressionFn: _jfmengels$elm_lint$Lint_Rules_NoNestedLet$expressionFn,
	moduleEndFn: function (ctx) {
		return {
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: ctx
		};
	},
	initialContext: _jfmengels$elm_lint$Lint_Rules_NoNestedLet$Context
};
var _jfmengels$elm_lint$Lint_Rules_NoNestedLet$rule = function (input) {
	return A2(_jfmengels$elm_lint$Lint$lint, input, _jfmengels$elm_lint$Lint_Rules_NoNestedLet$implementation);
};
