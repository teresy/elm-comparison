var _jfmengels$elm_lint$Lint_Rules_NoDebug$error = A2(_jfmengels$elm_lint$Lint_Types$LintError, 'NoDebug', 'Forbidden use of Debug');
var _jfmengels$elm_lint$Lint_Rules_NoDebug$expressionFn = F2(
	function (ctx, node) {
		var _p0 = node;
		if ((_p0.ctor === 'Enter') && (_p0._0.ctor === 'Variable')) {
			return A2(_elm_lang$core$List$member, 'Debug', _p0._0._0) ? {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: _jfmengels$elm_lint$Lint_Rules_NoDebug$error,
					_1: {ctor: '[]'}
				},
				_1: ctx
			} : {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: ctx
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: ctx
			};
		}
	});
var _jfmengels$elm_lint$Lint_Rules_NoDebug$Context = {};
var _jfmengels$elm_lint$Lint_Rules_NoDebug$implementation = {
	statementFn: _jfmengels$elm_lint$Lint$doNothing,
	typeFn: _jfmengels$elm_lint$Lint$doNothing,
	expressionFn: _jfmengels$elm_lint$Lint_Rules_NoDebug$expressionFn,
	moduleEndFn: function (ctx) {
		return {
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: ctx
		};
	},
	initialContext: _jfmengels$elm_lint$Lint_Rules_NoDebug$Context
};
var _jfmengels$elm_lint$Lint_Rules_NoDebug$rule = function (input) {
	return A2(_jfmengels$elm_lint$Lint$lint, input, _jfmengels$elm_lint$Lint_Rules_NoDebug$implementation);
};
