var _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$error = function (property) {
	return A2(
		_jfmengels$elm_lint$Lint_Types$LintError,
		'SimplifyPropertyAccess',
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Access to property `',
			A2(
				_elm_lang$core$Basics_ops['++'],
				property,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'` could be simplified by using `.',
					A2(_elm_lang$core$Basics_ops['++'], property, '`')))));
};
var _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$expressionFn = F2(
	function (ctx, node) {
		var _p0 = node;
		if (((((((_p0.ctor === 'Enter') && (_p0._0.ctor === 'Lambda')) && (_p0._0._0.ctor === '::')) && (_p0._0._0._0.ctor === 'Variable')) && (_p0._0._0._1.ctor === '[]')) && (_p0._0._1.ctor === 'Access')) && (_p0._0._1._0.ctor === 'Variable')) {
			var _p1 = _p0._0._1._1;
			return (_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(_p1),
				1) && _elm_lang$core$Native_Utils.eq(_p0._0._1._0._0, _p0._0._0._0._0)) ? {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$error(
						A2(_elm_lang$core$String$join, '', _p1)),
					_1: {ctor: '[]'}
				},
				_1: ctx
			} : {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: ctx
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: ctx
			};
		}
	});
var _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$statementFn = F2(
	function (ctx, node) {
		var _p2 = node;
		if (((((((_p2.ctor === 'Enter') && (_p2._0.ctor === 'FunctionDeclaration')) && (_p2._0._1.ctor === '::')) && (_p2._0._1._0.ctor === 'Variable')) && (_p2._0._1._1.ctor === '[]')) && (_p2._0._2.ctor === 'Access')) && (_p2._0._2._0.ctor === 'Variable')) {
			var _p3 = _p2._0._2._1;
			return (_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(_p3),
				1) && _elm_lang$core$Native_Utils.eq(_p2._0._2._0._0, _p2._0._1._0._0)) ? {
				ctor: '_Tuple2',
				_0: {
					ctor: '::',
					_0: _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$error(
						A2(_elm_lang$core$String$join, '', _p3)),
					_1: {ctor: '[]'}
				},
				_1: ctx
			} : {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: ctx
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: ctx
			};
		}
	});
var _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$Context = {};
var _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$implementation = {
	statementFn: _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$statementFn,
	typeFn: _jfmengels$elm_lint$Lint$doNothing,
	expressionFn: _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$expressionFn,
	moduleEndFn: function (ctx) {
		return {
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: ctx
		};
	},
	initialContext: _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$Context
};
var _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$rule = function (input) {
	return A2(_jfmengels$elm_lint$Lint$lint, input, _jfmengels$elm_lint$Lint_Rules_SimplifyPropertyAccess$implementation);
};
