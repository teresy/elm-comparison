var _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$nameOfMethod = function (members) {
	return A2(
		_elm_lang$core$String$join,
		'.',
		A2(
			_elm_lang$core$List$concatMap,
			function (a) {
				return a;
			},
			members));
};
var _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$simplifiableFns = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'List.map',
		_1: {
			ctor: '::',
			_0: 'Set.map',
			_1: {
				ctor: '::',
				_0: 'Array.map',
				_1: {
					ctor: '::',
					_0: 'Array.indexedMap',
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$error = F2(
	function (op, fn) {
		return A2(
			_jfmengels$elm_lint$Lint_Types$LintError,
			'SimplifyPiping',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Instead of `',
				A2(
					_elm_lang$core$Basics_ops['++'],
					fn,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' f ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							op,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' List.map g`, try ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									fn,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' (f ',
										A2(_elm_lang$core$Basics_ops['++'], op, ' g)')))))))));
	});
var _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod = F3(
	function (op, left, right) {
		var _p0 = {
			ctor: '::',
			_0: left,
			_1: {
				ctor: '::',
				_0: right,
				_1: {ctor: '[]'}
			}
		};
		if (((((((((_p0.ctor === '::') && (_p0._0.ctor === 'Application')) && (_p0._0._0.ctor === 'Access')) && (_p0._0._0._0.ctor === 'Variable')) && (_p0._1.ctor === '::')) && (_p0._1._0.ctor === 'Application')) && (_p0._1._0._0.ctor === 'Access')) && (_p0._1._0._0._0.ctor === 'Variable')) && (_p0._1._1.ctor === '[]')) {
			var _p2 = _p0._0._0._0._0;
			var _p1 = _p0._0._0._1;
			return (_elm_lang$core$Native_Utils.eq(
				{
					ctor: '::',
					_0: _p2,
					_1: {
						ctor: '::',
						_0: _p1,
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _p0._1._0._0._0._0,
					_1: {
						ctor: '::',
						_0: _p0._1._0._0._1,
						_1: {ctor: '[]'}
					}
				}) && A2(
				_elm_lang$core$Set$member,
				_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$nameOfMethod(
					{
						ctor: '::',
						_0: _p2,
						_1: {
							ctor: '::',
							_0: _p1,
							_1: {ctor: '[]'}
						}
					}),
				_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$simplifiableFns)) ? {
				ctor: '::',
				_0: A2(
					_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$error,
					op,
					_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$nameOfMethod(
						{
							ctor: '::',
							_0: _p2,
							_1: {
								ctor: '::',
								_0: _p1,
								_1: {ctor: '[]'}
							}
						})),
				_1: {ctor: '[]'}
			} : {ctor: '[]'};
		} else {
			return {ctor: '[]'};
		}
	});
var _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$expressionFn = F2(
	function (ctx, node) {
		var _p3 = node;
		_v1_6:
		do {
			if (((((_p3.ctor === 'Enter') && (_p3._0.ctor === 'BinOp')) && (_p3._0._0.ctor === 'Variable')) && (_p3._0._0._0.ctor === '::')) && (_p3._0._0._0._1.ctor === '[]')) {
				switch (_p3._0._0._0._0) {
					case '|>':
						if (_p3._0._1.ctor === 'Application') {
							var _p6 = _p3._0._2;
							var _p5 = _p3._0._1._0;
							var _p4 = _p6;
							if (((((_p4.ctor === 'BinOp') && (_p4._0.ctor === 'Variable')) && (_p4._0._0.ctor === '::')) && (_p4._0._0._0 === '|>')) && (_p4._0._0._1.ctor === '[]')) {
								return {
									ctor: '_Tuple2',
									_0: A3(_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod, '>>', _p5, _p4._1),
									_1: ctx
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: A3(_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod, '>>', _p5, _p6),
									_1: ctx
								};
							}
						} else {
							if (((((_p3._0._2.ctor === 'BinOp') && (_p3._0._2._0.ctor === 'Variable')) && (_p3._0._2._0._0.ctor === '::')) && (_p3._0._2._0._0._0 === '|>')) && (_p3._0._2._0._0._1.ctor === '[]')) {
								return {
									ctor: '_Tuple2',
									_0: A3(_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod, '>>', _p3._0._2._1, _p3._0._2._2),
									_1: ctx
								};
							} else {
								break _v1_6;
							}
						}
					case '<|':
						switch (_p3._0._2.ctor) {
							case 'Application':
								var _p8 = _p3._0._1;
								var _p7 = _p8;
								if (((((_p7.ctor === 'BinOp') && (_p7._0.ctor === 'Variable')) && (_p7._0._0.ctor === '::')) && (_p7._0._0._0 === '<|')) && (_p7._0._0._1.ctor === '[]')) {
									return {
										ctor: '_Tuple2',
										_0: A3(_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod, '<<', _p8, _p7._1),
										_1: ctx
									};
								} else {
									return {
										ctor: '_Tuple2',
										_0: A3(_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod, '<<', _p8, _p3._0._2._0),
										_1: ctx
									};
								}
							case 'BinOp':
								if ((((_p3._0._2._0.ctor === 'Variable') && (_p3._0._2._0._0.ctor === '::')) && (_p3._0._2._0._0._0 === '<|')) && (_p3._0._2._0._0._1.ctor === '[]')) {
									return {
										ctor: '_Tuple2',
										_0: A3(_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod, '<<', _p3._0._1, _p3._0._2._1),
										_1: ctx
									};
								} else {
									break _v1_6;
								}
							default:
								break _v1_6;
						}
					case '>>':
						var _p11 = _p3._0._2;
						var _p10 = _p3._0._1;
						var _p9 = _p10;
						if (((((_p9.ctor === 'BinOp') && (_p9._0.ctor === 'Variable')) && (_p9._0._0.ctor === '::')) && (_p9._0._0._0 === '>>')) && (_p9._0._0._1.ctor === '[]')) {
							return {
								ctor: '_Tuple2',
								_0: A3(_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod, '>>', _p9._2, _p11),
								_1: ctx
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: A3(_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod, '>>', _p10, _p11),
								_1: ctx
							};
						}
					case '<<':
						var _p14 = _p3._0._2;
						var _p13 = _p3._0._1;
						var _p12 = _p13;
						if (((((_p12.ctor === 'BinOp') && (_p12._0.ctor === 'Variable')) && (_p12._0._0.ctor === '::')) && (_p12._0._0._0 === '<<')) && (_p12._0._0._1.ctor === '[]')) {
							return {
								ctor: '_Tuple2',
								_0: A3(_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod, '<<', _p12._2, _p14),
								_1: ctx
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: A3(_jfmengels$elm_lint$Lint_Rules_SimplifyPiping$reportIfSimplifiableMethod, '<<', _p13, _p14),
								_1: ctx
							};
						}
					default:
						break _v1_6;
				}
			} else {
				break _v1_6;
			}
		} while(false);
		return {
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: ctx
		};
	});
var _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$Context = {};
var _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$implementation = {
	statementFn: _jfmengels$elm_lint$Lint$doNothing,
	typeFn: _jfmengels$elm_lint$Lint$doNothing,
	expressionFn: _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$expressionFn,
	moduleEndFn: function (ctx) {
		return {
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: ctx
		};
	},
	initialContext: _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$Context
};
var _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$rule = function (input) {
	return A2(_jfmengels$elm_lint$Lint$lint, input, _jfmengels$elm_lint$Lint_Rules_SimplifyPiping$implementation);
};
