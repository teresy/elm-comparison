var _jfmengels$elm_lint$Lint$countErrors = F2(
	function (severity, errors) {
		return _elm_lang$core$List$sum(
			A2(
				_elm_lang$core$List$map,
				function (_p0) {
					return _elm_lang$core$List$length(
						A2(
							_elm_lang$core$List$filter,
							function (_p1) {
								return A2(
									F2(
										function (x, y) {
											return _elm_lang$core$Native_Utils.eq(x, y);
										}),
									severity,
									_elm_lang$core$Tuple$first(_p1));
							},
							_elm_lang$core$Tuple$second(_p0)));
				},
				errors));
	});
var _jfmengels$elm_lint$Lint$doNothing = F2(
	function (ctx, _p2) {
		return {
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: ctx
		};
	});
var _jfmengels$elm_lint$Lint$visitAndAccumulate = F3(
	function (rule, visitor, _p3) {
		var _p4 = _p3;
		return A2(
			_elm_lang$core$Tuple$mapFirst,
			function (errors_) {
				return A2(_elm_lang$core$Basics_ops['++'], _p4._0, errors_);
			},
			A2(visitor, rule, _p4._1));
	});
var _jfmengels$elm_lint$Lint$lintWithVisitors = F2(
	function (rule, visitors) {
		return _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldl,
				_jfmengels$elm_lint$Lint$visitAndAccumulate(rule),
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: rule.initialContext
				},
				visitors));
	});
var _jfmengels$elm_lint$Lint$visitExpression = F2(
	function (rule, expression) {
		return A3(
			_elm_lang$core$List$foldl,
			_jfmengels$elm_lint$Lint$visitAndAccumulate(rule),
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: rule.initialContext
			},
			_jfmengels$elm_lint$Lint_Visitor$expressionToVisitors(expression));
	});
var _jfmengels$elm_lint$Lint$lint = F2(
	function (statements, rule) {
		return A2(
			_jfmengels$elm_lint$Lint$lintWithVisitors,
			rule,
			_jfmengels$elm_lint$Lint_Visitor$transformStatementsIntoVisitors(statements));
	});
var _jfmengels$elm_lint$Lint$removeComments = function (_p5) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('\n +\\w+ : .*'),
		_elm_lang$core$Basics$always(''),
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('--.$'),
			_elm_lang$core$Basics$always(''),
			_p5));
};
var _jfmengels$elm_lint$Lint$parseSource = function (source) {
	return A2(
		_elm_lang$core$Result$map,
		function (_p6) {
			var _p7 = _p6;
			return _p7._2;
		},
		A2(
			_elm_lang$core$Result$mapError,
			function (_p8) {
				var _p9 = _p8;
				return _p9._2;
			},
			_Bogdanp$elm_ast$Ast$parse(
				_jfmengels$elm_lint$Lint$removeComments(source))));
};
var _jfmengels$elm_lint$Lint$lintSourceWithRule = F2(
	function (statements, _p10) {
		var _p11 = _p10;
		return A2(
			_elm_lang$core$List$map,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				})(_p11._0),
			_p11._1(statements));
	});
var _jfmengels$elm_lint$Lint$lintSource = F2(
	function (rules, source) {
		return A2(
			_elm_lang$core$Result$map,
			function (statements) {
				return A2(
					_elm_lang$core$List$concatMap,
					_jfmengels$elm_lint$Lint$lintSourceWithRule(statements),
					rules);
			},
			_jfmengels$elm_lint$Lint$parseSource(source));
	});
